应急产生条件
1.灰度机器或全量机器出现一个或多个非预期异常日志
2.打消标埋点中未出现预期的打消标数据	
3.业务日志存在一个或多个非预期数据

应急操作:
1.灰度机器SOA、HMS拉出 & 服务回滚
2.灰度机器SOA、HMS拉出 & 服务回滚
3.设置Apollo：tech_loadLabelDefLocal=true


1）掌握基本的Flink/ES技术开发，能够熟练编写算子；
2）总结并梳理了引擎Flink算子开发常见问题：https://hellobike.yuque.com/bbteam/rmkokt/cgg0pls1cq9riiu0。


1）熟练了标签平台的基本架构，基本能够独自在标签平台/标签后台/标签引擎开发需求；
2）基本熟悉业务流程，能够承接部分的线上问题排查；

1）在空闲时间学习了Flink/ES等相关技术，并能够独立开发标签引擎的相关需求；
2）总结并输出了四篇文档，提升了对标签平台的业务和架构认知。
=================================================================================================================================================================

完成了60个标签的容忍度评估。

1）标签大表数据治理：标签打消标资产表治理，清理约320w数据，释放约6.94GB空间;
2）标签引擎延迟队列优化：Flink任务空跑&数据对比&任务切换（修复4个标签的延迟队列问题）;
3）标签引擎算子优化：算子关键字设计&解析（接入6个标签）
4）标签后台服务GC问题治理;


1）完成5个稳定项的治理工作；
2）
=================================================================================================================================================================

发布期间严格执行三板斧和遵守发布计划，0发布故障；

1）冒烟通过率100%；
2）产生三个Bug，其中有两个Bug为测试未正确配置参数导致；

需求交付0延期；且能够逐步通过对业务的理解评估需求合理性。

=================================================================================================================================================================

总结了个人对标签平台的一些认识，业务流程以及技术栈的积累，后期计划团队分享。

发现标签平台目前存在的一些问题，计划根据实际情况改进系统：
1）标签的Flink任务会因为cache无法被GC导致堆内存暴涨，发现本地cache底层用的HashMap，后期考虑替换为具有淘汰机制的cache。
2）标签数据库CPU间断性突刺和慢查，发现主要原因是SQL使用多表JOIN，后期考虑统一改造。
3）存在一部分标签Flink任务CPU和内存水位长期处于低水平，资源分配不合理产生不必要的成本，后期计划根据实际需求逐步改造。
4）数据源的数据解析格式灵活匹配数据的实际存储方式，而不是通过isYukon判断。


标签平台的需求开发不同于其他平台，需要掌握对标签引擎算子的运行原理和编排。通过不断地阅读引擎/Flink源码，在了解原理的基础上，逐渐地熟悉并且能够高效地完成需求开发和技改。
在熟悉的过程中也遇到了一些常见问题，在不断探索的过程中丰富了技术知识并总结了相关文档以避免后面遇到相同的问题而影响开发效率：https://hellobike.yuque.com/bbteam/rmkokt/cgg0pls1cq9riiu0。
当然，后期仍需要不断地积累技术以应对未知的风险。

标签平台稳定性治理聚焦于标签任务运行的稳定性和故障预案措施。其中，个人完成了所负责的标签引擎和标签后台稳定性治理事项，且在完成过程中不断地提升了个人的风险意识和问题排查能力。
同时，也思考了潜在的稳定性问题，比如标签数据库CPU间断性突刺和慢查，发现主要原因是SQL使用多表JOIN。
维护标签任务稳定性是一个需要一直关注的事情，对于已知和未知的问题，在做变更的时候都需要时刻做好预案准备。

过程质量是当前阶段衡量个人能力的重要指标。在试用期间每个迭代的需求都能够按质按量交付，未产生生产故障，一次冒烟通过率以及低级bug数均到要求。
往后的开发工作仍然要遵守质量标准和开发规范，提升编码能力，包括代码的可读性和可维护性；

为了提高业务适应性和灵活性，我总结并梳理了标签平台的重要业务流程以及在开发过程中可能遇到的问题和对应的解决方案。
在开发需求时，能够逐渐地结合业务判断需求的合理性以做出改进；开发过程中遇到的重要非紧急问题，分析出了具体原因并计划后期结合实际改进。
但是目前仍面临的挑战仍然是对业务的理解深度难以及时协同产品分析需求，后期计划多介入问题排查和需求产出来不断形成良好的沟通能力。


试用期间主要参与两轮数据-标签平台的业务需求和稳定性治理开发，输出20+篇技术方案。
在需求开发方面：
1. 在前期参与了车基的3个服务（AppHellobikeAliasService、AppOssDAL、AppPowerBikeBosCommonService）下线工作，梳理上下游接口并输出对接文档。
2. 后期主要参与标签Admin管理后台开发和标签逻辑调整（共12个标签）和新增标签（共11个标签）开发。
在稳定性治理方面，参与了：
1. 标签大表数据治理：标签打消标资产表治理，清理约320w数据，释放约6.94GB空间;
2. 标签引擎延迟队列优化：Flink任务空跑&数据对比&任务切换（修复4个标签的延迟队列问题）;
3. 标签引擎算子优化：算子关键字设计&解析（接入6个标签：101助力车超区、4093闲置未骑未调、4111短时未骑行、4041头盔在篮异常、4034头盔缺电、4004头盔清洗）;
4. 标签后台服务GC问题治理;

在完成以上任务的过程中，也遇到了一些问题与挑战，包括：
1. 标签的Flink任务会因为cache无法被GC导致堆内存暴涨，发现本地cache底层用的HashMap，后期考虑替换为具有淘汰机制的cache。
2. 标签数据库CPU间断性突刺和慢查，发现主要原因是SQL使用多表JOIN，后期考虑统一改造。
3. 存在一部分标签Flink任务CPU和内存水位长期处于低水平，资源分配不合理产生不必要的成本，后期计划根据实际需求逐步改造。
需求的开发和对于问题的思考带来了一些成长，主要包括以下三个方面：
1. 逻辑能力以及业务抽象能力成长；
2. 技术与问题分析能力成长：1）参与公司组织的培训课程；2） 从技术方案评审学习分析问题思路；3） 开源技术和哈啰技术公众号；
3. 风险意识：1） 三板斧原则；2） 告警/线上问题的基本排查思路；3） 标签规则发布/空跑切换时异常处理思路；

在需求开发过程中，不断提升了适应与学习能力：能够在两周内上手标签需求的开发，并在后期主导开发；同时能够做到思考技术，及时总结：面对未接触过的技术(Flink)，能够快速补充知识并合理运用到业务中；积极主动：当需求不合理时，能够主动与产品沟通，保证需求的完整性和合理性。当然，也有一些不足，主要集中在业务层面，比如：需要进一步沉淀学习开源组件，面对业务需求或线上问题能够抓住根本及时响应；跨部门沟通和协作方面还有提升空间，计划通过多参加团队会议和内部培训学习逐步改善。

对于未来的工作展望与规划，主要集中在两方面：业务层面和技术能力。关于业务层面，包括：
1. 治理标签引擎和标签中间件现存稳定性问题；
2. 不断提升业务认知，能够做到独立承接业务需求；
3. 拓展业务范围，积极参与其他业务线的研发工作；
对于技术能力，，包括：
1. 提升编码能力，包括代码的可读性和可维护性；
2. 加强对两轮各域的业务熟悉程度，提高需求完成效率以及线上问题排查速度；
3. 关注行业趋势并积极主动学习新技术和解决方案，能够做到学以致用并在团队内分享；
